<%- include('../components/template') %>
<main id="content">
  <style>
.input-error {
    border: 2px solid rgb(255, 69, 69);
}

.error-message {
    color: rgb(255, 69, 69);
    font-size: 0.9rem;
}
  </style>
   <div class="bg-transparent">
      <div class="sm:flex sm:items-center px-8 pt-4">
         <div class="sm:flex-auto">
           <h1 class="text-base font-medium leading-6 text-white">Instances</h1>
           <p class="mt-1 tracking-tight text-sm text-neutral-500">A list of all the instances deployed on the Skyport panel.</p>
         </div>
         <div class="mt-4 sm:ml-8 sm:mt-0 sm:flex-none">
           <button id="createButton" type="button" class="block rounded-xl bg-white px-3 py-2 text-center text-sm font-medium text-neutral-800 shadow-lg hover:bg-neutral-200 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Create new instance</button>
         </div>
       </div>
 <% if (req.query.err == "CREATED") { %>
      <div class="mt-6 w-full">
        <div class="rounded-xl bg-emerald-800/10 px-4 py-6 mt-8 ml-8 mb-8 mr-8">
          <div class="flex">
             <div class="flex-shrink-0 ml-1.5">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5 mt-2 text-emerald-400">
                  <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 0 1 .143 1.052l-8 10.5a.75.75 0 0 1-1.127.075l-4.5-4.5a.75.75 0 0 1 1.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 0 1 1.05-.143Z" clip-rule="evenodd" />
                </svg>                
             </div>
             <div class="ml-5">
                <h3 class="text-sm font-medium text-emerald-400">Action completed!</h3>
                <div class="text-sm text-emerald-400/50">
                   <p>The instance was created successfully. Please allow a few minutes for it to finish installing and downloading additional files. </p>
                </div>
             </div>
          </div>
       </div>
      <% } %>	  
 
      <div style="display: block;" id="nodeTable" class="mt-6 w-full">
      <table class="mt-6 w-full whitespace-nowrap text-left">
        <colgroup>
          <col class="w-full sm:w-4/12">
          <col class="lg:w-4/12">
          <col class="lg:w-2/12">
          <col class="lg:w-1/12">
          <col class="lg:w-1/12">
          <col class="lg:w-1/12">
        </colgroup>
        <thead class="border-b border-white/5 text-sm leading-6 text-white">
          <tr>
            <th scope="col" class="py-2 pl-4 pr-8 font-medium sm:pl-6 lg:pl-8">Name</th>
			<th scope="col" class="py-2 pl-0 pr-8 font-medium sm:table-cell">Node</th>
            <th scope="col" class="py-2 pl-0 pr-8 font-medium sm:table-cell">Docker ID</th>
            <th scope="col" class="py-2 pl-0 pr-4 text-right font-medium sm:pr-8 sm:text-left lg:pr-20">Volume / Mount</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-white/5">
         <% instances.forEach(function(instance) { %>
          <tr>
            <td class="py-4 pl-4 pr-8 sm:pl-6 lg:pl-8">
              <div class="flex items-center gap-x-4">
                <div class="truncate text-sm font-medium leading-6 text-white"><%= instance.Name %></div>
              </div>
            </td>
            <td class="py-4 pl-0 pr-4 sm:table-cell sm:pr-8">
              <div class="flex gap-x-3">
                <div class="font-mono text-sm leading-6 text-neutral-400"><%= instance.Node.name %></div>
              </div>
            </td>
            <td class="py-4 pl-0 pr-4 sm:table-cell sm:pr-8">
              <div class="flex gap-x-3">
                <div class="font-mono text-sm leading-6 text-neutral-400"><%= instance.ContainerId %></div>
              </div>
            </td>
            <td class="py-4 pl-0 pr-4 text-sm leading-6 sm:pr-8 lg:pr-20">
              <div class="flex gap-x-3">
                <div class="font-mono text-sm leading-6 text-neutral-400">/volumes/<%= instance.VolumeId %></div>
              </div>
            </td>
            <td class="py-4 pl-0 pr-4 text-right sm:pr-8 lg:pr-20">
              <div class="flex gap-x-3">
                <button onclick="location.href='/admin/instance/delete/<%= instance.Id %>'" class="block rounded-xl bg-red-600 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-red-500 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                  Remove
                </button>

                <% if (instance.suspended === true) { %>
                  <form action="/admin/instances/unsuspend/<%= instance.Id %>" method="POST">
                    <button type="submit" class="block rounded-xl bg-white px-3 py-2 text-center text-sm font-medium text-neutral-800 shadow-lg hover:bg-gray-100 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                      Unsuspend
                    </button>
                  </form>
                <% } else { %>
                  <form action="/admin/instances/suspend/<%= instance.Id %>" method="POST">
                    <button type="submit" class="block rounded-xl bg-white px-3 py-2 text-center text-sm font-medium text-neutral-800 shadow-lg hover:bg-gray-100 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                      Suspend
                    </button>
                    
                  </form>

                <% } %>                
                
              </div>
            </td>
          </tr>
          <% }); %>
        </tbody>
      </table>
      </div>

      <div style="display: none;" id="nodeForm" class="mt-6 px-8 w-full grid grid-cols-2 gap-4">
        <div class="p-3 bg-transparent shadow-xl border border-white/5 rounded-xl overflow-hidden sm:p-6 lg:p-10 card" style="width: 800px;">
            <form>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">Name:</label>
                        <input id="name" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5" placeholder="My instance">
                    </div>
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">User:</label>
                        <select style="background: #171717;" id="user" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5">
                            <% users.forEach(function(user) { %>
                                <option value="<%= user.userId %>"><%= user.username %></option>
                            <% }); %>
                        </select>
                    </div>
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">Image:</label>
                        <select style="background: #171717;" id="image" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5">
                            <% images.forEach(function(image) { %>
                                <option value="<%= image.Image %>" data-configfilepath="<%= image.ConfigFilePath %>" data-configfilecontent="<%= image.ConfigFileContent %>"><%= image.Name %> (<%= image.Image %>)</option>
                            <% }); %>
                        </select>
                    </div>
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">Node:</label>
                        <select style="background: #171717;" id="node" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5">
                            <% nodes.forEach(function(node) { %>
                                <option value="<%= node.id %>"><%= node.name %></option>
                            <% }); %>
                        </select>
                    </div>
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">Memory (MiB):</label>
                        <input id="memory" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5" placeholder="2048">
                    </div>
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">CPU Threads:</label>
                        <input id="cpu" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5" placeholder="1">
                    </div>
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">Ports:</label>
                        <input id="ports" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5" placeholder="25565:25565,8080:8080">
                    </div>
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">Primary Port:</label>
                        <input id="primary" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5" placeholder="25565">
                    </div>
                </div>
    
                <div class="mt-4">
                    <button id="createNodeBtn" type="button" class="block rounded-xl bg-white px-3 py-2 text-center text-sm font-medium text-neutral-800 shadow-lg hover:bg-neutral-200 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Create</button>
                </div>
            </form>
        </div>
    </div>


    
</main>
<script>
  document.getElementById('createButton').addEventListener('click', function() {
    var table = document.getElementById('nodeTable');
    var form = document.getElementById('nodeForm');
    if (table.style.display !== 'none') {
      table.style.display = 'none';
      form.style.display = 'block';
    } else {
      table.style.display = 'block';
      form.style.display = 'none';
    }
  });

  document.getElementById('image').addEventListener('change', function() {
    const selectedOption = this.options[this.selectedIndex];
    const cmd = selectedOption.getAttribute('data-cmd');
    const env = JSON.parse(selectedOption.getAttribute('data-env') || '{}');
  });
</script>
<script>
document.getElementById('createNodeBtn').addEventListener('click', async function() {
    const createBtn = this;
    createBtn.textContent = 'Working on it...';
    createBtn.disabled = true;

    const name = document.getElementById('name');
    const memory = document.getElementById('memory');
    const cpu = document.getElementById('cpu');
    const ports = document.getElementById('ports');
    const imageDropdown = document.getElementById('image');
    const primaryPort = document.getElementById('primary');
    const selectedImage = imageDropdown.options[imageDropdown.selectedIndex];
    const configFilePath = selectedImage.getAttribute('data-configfilepath');
    let configFileContent = selectedImage.getAttribute('data-configfilecontent');

    clearValidationErrors();

    let isValid = true;

    if (name.value.includes(' ')) {
        showError(name, 'Name must not contain spaces.');
        isValid = false;
    }

    if (!isPositiveInteger(memory.value)) {
        showError(memory, 'Memory must be an integer greater than 1.');
        isValid = false;
    }

    if (!isPositiveIntegerCpu(cpu.value)) {
        showError(cpu, 'CPU must be an integer greater than 0.');
        isValid = false;
    }

    const portPattern = /^(\d+:\d+)(,\d+:\d+)*$/;
    if (!ports.value.match(portPattern)) {
        showError(ports, 'Ports must be in the format "port:port,port:port".');
        isValid = false;
    }

    if (!primaryPort.value.match(/^\d+$/)) {
        showError(primaryPort, 'Primary port must be a valid number.');
        isValid = false;
    } else {
        configFileContent = configFileContent.replace('{{primaryPort}}', primaryPort.value);
    }

    if (!isValid) {
        createBtn.textContent = 'Create';
        createBtn.disabled = false;
        return;
    }

    const nodeData = {
        name: name.value,
        image: imageDropdown.value,
        nodeId: await document.getElementById('node').value,
        user: await document.getElementById('user').value,
        memory: memory.value,
        cpu: cpu.value,
        ports: ports.value,
        primary: primaryPort.value,
        configFilePath: configFilePath,
        configFileContent: configFileContent
    };

    await sendData(nodeData, createBtn);
});

function clearValidationErrors() {
    const inputs = document.querySelectorAll('.input-error');
    const messages = document.querySelectorAll('.error-message');
    inputs.forEach(input => input.classList.remove('input-error'));
    messages.forEach(msg => msg.remove());
}

function serializeParams(params) {
    return Object.keys(params)
        .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(params[key]))
        .join('&');
    }
    
function showError(element, message) {
    element.classList.add('input-error');
    const errorDiv = document.createElement('div');
    errorDiv.textContent = message;
    errorDiv.className = 'error-message';
    element.parentNode.insertBefore(errorDiv, element.nextSibling);
}

function isPositiveInteger(value) {
    const num = parseInt(value, 10);
    return Number.isInteger(num) && num > 1;
}

function isPositiveIntegerCpu(value) {
    const num = parseInt(value, 10);
    return Number.isInteger(num) && num > 0;
}

function sendData(nodeData, createBtn) {
    const baseUrl = '/instances/deploy';
    const queryParams = serializeParams(nodeData);
    const fullUrl = `${baseUrl}?${queryParams}`;

    fetch(fullUrl, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (response.ok) {
            return response.json();
        } else {
            throw new Error('Failed to create instance');
        }
    })
    .then(data => {
	window.location.href = '../admin/instances?err=CREATED'
        console.log('Instance created:', data);
        createBtn.textContent = 'Create';
        createBtn.disabled = false;
    })
    .catch(error => {
        console.error('Error creating instance:', error);
        alert('Error! Instance creation failed. Check the console for more details.');
        createBtn.textContent = 'Create';
        createBtn.disabled = false;
    });
}

function handleResponse(response) {
    if (response.ok) {
        return response.json();
    }
    throw new Error('Failed to create instance');
}

function handleError(error) {
    console.error('Error creating instance:', error);
    alert('Error! Check the console for more details.');
    createBtn.textContent = 'Create';
    createBtn.disabled = false;
}
</script>
<%- include('../components/footer') %>
